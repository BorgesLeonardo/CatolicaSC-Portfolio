name: SonarQube Analysis

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  BACKEND_DIR: './backend'

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      - name: 🔍 Run ESLint
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run lint

      - name: 💅 Check Prettier formatting
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run format -- --check

      - name: 🏗️ Build TypeScript
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run build

      - name: 🧪 Run tests with coverage
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: 📊 SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: sonarqube
    if: always()
    
    steps:
    - name: 📊 Check Quality Gate
      uses: SonarSource/sonarqube-quality-gate-action@v1.0.2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  notify:
    name: Notify Analysis Results
    runs-on: ubuntu-latest
    needs: [sonarqube, quality-gate]
    if: always()
    
    steps:
      - name: 📢 Notify success
        if: needs.sonarqube.result == 'success' && needs.quality-gate.result == 'success'
        run: |
          echo "✅ SonarQube analysis completed successfully!"
          echo "🔍 Quality Gate: PASSED"
          echo "📊 Coverage: Generated"
          echo "🎯 Code Quality: Excellent"

      - name: 📢 Notify failure
        if: needs.sonarqube.result == 'failure' || needs.quality-gate.result == 'failure'
        run: |
          echo "❌ SonarQube analysis failed!"
          echo "🔍 Quality Gate: ${{ needs.quality-gate.result }}"
          echo "📊 Analysis: ${{ needs.sonarqube.result }}"
          echo "💡 Check SonarCloud dashboard for details"
          exit 1
