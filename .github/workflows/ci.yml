name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  # Job para análise de qualidade do código
  quality-analysis:
    name: Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Lint frontend
      run: |
        cd frontend && npm run lint
    
    - name: Lint backend
      run: |
        cd backend && npm run lint
    
    - name: Build frontend
      run: |
        cd frontend && npm run build
    
    - name: Build backend
      run: |
        cd backend && npm run build
    
    - name: Run backend tests
      run: |
        cd backend && npm test
      env:
        DATABASE_URL: "postgresql://test:test@localhost:5432/test?schema=public"
        CLERK_SECRET_KEY: "test-key"
        NODE_ENV: "test"
    
    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@v1.0.3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
      with:
        scanMetadataReportFile: target/sonar/report-task.txt

  # Job para análise de segurança
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=frontend/package.json
        command: test
    
    - name: Run Snyk to check backend vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=backend/package.json
        command: test

  # Job para testes de integração
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd backend && npm ci
    
    - name: Run database migrations
      run: |
        cd backend && npx prisma migrate deploy
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db?schema=public"
    
    - name: Run integration tests
      run: |
        cd backend && npm run test:integration
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db?schema=public"
        CLERK_SECRET_KEY: "test-key"
        NODE_ENV: "test"

  # Job para build e deploy (apenas na branch main)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [quality-analysis, security-scan, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Build applications
      run: |
        cd frontend && npm run build
        cd ../backend && npm run build
    
    - name: Build Docker images
      run: |
        docker build -f infra/docker/frontend.Dockerfile -t catolica-crowdfunding-frontend:latest .
        docker build -f infra/docker/backend.Dockerfile -t catolica-crowdfunding-backend:latest .
    
    - name: Deploy to staging
      run: |
        echo "Deploy to staging environment"
        # Add your deployment commands here
    
    - name: Deploy to production
      run: |
        echo "Deploy to production environment"
        # Add your production deployment commands here
