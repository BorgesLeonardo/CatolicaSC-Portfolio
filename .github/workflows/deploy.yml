name: Deploy with Quality Gate

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20.x'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  # Job para validação de qualidade antes do deploy
  quality-validation:
    name: Quality Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Run tests with coverage
      run: |
        cd frontend && npm run test:coverage
        cd ../backend && npm run test:coverage
      env:
        DATABASE_URL: "postgresql://test:test@localhost:5432/test?schema=public"
        CLERK_SECRET_KEY: "test-key"
        NODE_ENV: "test"
    
    - name: Build applications
      run: |
        cd frontend && npm run build
        cd ../backend && npm run build
    
    - name: SonarQube Quality Gate
      uses: sonarqube-quality-gate-action@v1.0.3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
      with:
        scanMetadataReportFile: target/sonar/report-task.txt

  # Job para análise de segurança
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=frontend/package.json
        command: test
    
    - name: Run Snyk backend security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=backend/package.json
        command: test

  # Job para deploy
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [quality-validation, security-validation]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Build applications
      run: |
        cd frontend && npm run build
        cd ../backend && npm run build
    
    - name: Build Docker images
      run: |
        docker build -f infra/docker/frontend.Dockerfile -t catolica-crowdfunding-frontend:${{ github.sha }} .
        docker build -f infra/docker/backend.Dockerfile -t catolica-crowdfunding-backend:${{ github.sha }} .
    
    - name: Deploy to staging
      if: github.event.inputs.environment == 'staging' || (github.ref == 'refs/heads/main' && github.event.inputs.environment != 'production')
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
    
    - name: Deploy to production
      if: github.event.inputs.environment == 'production'
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add your smoke tests here
        # Example: curl -f http://staging.example.com/health
    
    - name: Notify deployment status
      if: always()
      run: |
        echo "Deployment completed with status: ${{ job.status }}"
        # Add notification logic here (Slack, email, etc.)
