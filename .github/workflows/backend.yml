name: Backend CI/CD Pipeline with SonarQube

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  BACKEND_DIR: './backend'

jobs:
  # Job unificado de qualidade de código, testes e análise SonarQube
  quality-and-analysis:
    name: Code Quality, Tests & SonarQube Analysis
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better SonarQube analysis

    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm ci

    - name: 🔍 Run ESLint
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run lint

    - name: 💅 Check Prettier formatting
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run format -- --check

    - name: 🏗️ Build TypeScript
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run build

    - name: 🧪 Run tests with coverage
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run test:ci
      env:
        NODE_ENV: test
        CI: true

    - name: 🔒 Security audit
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm audit --audit-level moderate

    - name: 📊 Cache SonarCloud packages
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: 📊 SonarQube Scan
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=BorgesLeonardo_CatolicaSC-Portfolio
          -Dsonar.organization=catolicasc-portfolio
          -Dsonar.sources=backend/src
          -Dsonar.tests=backend/src/__tests__
          -Dsonar.typescript.lcov.reportPaths=backend/coverage/lcov.info
          -Dsonar.test.inclusions=**/*.test.ts,**/*.spec.ts
          -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/__tests__/**,**/node_modules/**,**/dist/**,**/coverage/**,**/prisma/**,**/*.config.js,**/*.setup.js
          -Dsonar.cpd.exclusions=**/*.test.ts,**/*.spec.ts,**/__tests__/**,**/prisma/**
          -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**,**/*.d.ts,**/jest.setup.js,**/jest.config.js,**/eslint.config.js,**/prisma/migrations/**
          -Dsonar.inclusions=backend/src/**/*.ts
          -Dsonar.qualitygate.wait=true
          -Dsonar.scm.provider=git

  # Job de verificação do Quality Gate
  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: quality-and-analysis
    if: always() && (needs.quality-and-analysis.result == 'success' || needs.quality-and-analysis.result == 'skipped') && (github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📊 Check Quality Gate
      uses: sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      continue-on-error: false

    - name: 📈 Quality Gate Results
      if: always()
      run: |
        echo "🔍 Quality Gate Status: ${{ steps.sonarqube-quality-gate-check.outcome }}"
        if [ "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure" ]; then
          echo "❌ Quality Gate FAILED - Please check SonarCloud for details"
          echo "🔗 SonarCloud URL: https://sonarcloud.io/dashboard?id=BorgesLeonardo_CatolicaSC-Portfolio"
          exit 1
        else
          echo "✅ Quality Gate PASSED"
        fi

  # Job de build e preparação para deploy
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: quality-and-analysis
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm ci

    - name: 🏗️ Build application
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run build

    - name: 📋 Generate Prisma client
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run db:generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DIRECT_URL: ${{ secrets.DIRECT_URL }}

    - name: 📦 Create deployment package
      run: |
        cd ${{ env.BACKEND_DIR }}
        tar -czf ../backend-deploy.tar.gz \
          dist/ \
          package.json \
          package-lock.json \
          node_modules/ \
          prisma/

    - name: 📤 Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-deploy-${{ github.sha }}
        path: backend-deploy.tar.gz
        retention-days: 7

  # Job de migração do banco de dados
  database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: quality-and-analysis
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm ci

    - name: 📋 Generate Prisma client
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run db:generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DIRECT_URL: ${{ secrets.DIRECT_URL }}

    - name: 🗄️ Run database migration
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run db:push
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DIRECT_URL: ${{ secrets.DIRECT_URL }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}

  # Job de deploy (placeholder)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, database]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-deploy-${{ github.sha }}

    - name: 📦 Extract build
      run: tar -xzf backend-deploy.tar.gz

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying backend to production..."
        echo "📦 Build extracted successfully"
        echo "🔧 Ready for deployment to hosting service"
        echo ""
        echo "💡 Deploy options:"
        echo "  - Heroku: heroku container:push web"
        echo "  - Railway: railway deploy"
        echo "  - DigitalOcean: doctl apps create"
        echo "  - AWS: aws ecs update-service"
        echo "  - Docker: docker run -p 3000:3000 backend"

  # Job de notificação
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quality-and-analysis, build, database, quality-gate]
    if: always()

    steps:
    - name: 📢 Notify success
      if: needs.quality-and-analysis.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ Backend CI/CD completed successfully!"
        echo "🏗️ Build: ${{ needs.build.result }}"
        echo "🗄️ Database: ${{ needs.database.result }}"
        echo "🔍 Quality & Analysis: ${{ needs.quality-and-analysis.result }}"
        echo "🚪 Quality Gate: ${{ needs.quality-gate.result }}"

    - name: 📢 Notify failure
      if: needs.quality-and-analysis.result == 'failure' || needs.build.result == 'failure' || needs.quality-gate.result == 'failure'
      run: |
        echo "❌ Backend CI/CD failed!"
        echo "🏗️ Build: ${{ needs.build.result }}"
        echo "🗄️ Database: ${{ needs.database.result }}"
        echo "🔍 Quality & Analysis: ${{ needs.quality-and-analysis.result }}"
        echo "🚪 Quality Gate: ${{ needs.quality-gate.result }}"
        exit 1
