name: CI & CD

on:
  pull_request:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

permissions:
  contents: read
  pull-requests: write
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ci_test_scan:
    name: Lint, Test, Coverage & Sonar
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        project:
          - name: backend
            path: ./backend
            test-script: test:coverage
          - name: frontend
            path: ./frontend
            test-script: test:coverage
      fail-fast: false

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.project.path }}
        run: |
          if [ "${{ matrix.project.name }}" = "frontend" ]; then
            # Fix for Rollup optional dependencies issue
            rm -rf node_modules package-lock.json
            npm install --legacy-peer-deps
          else
            npm ci
          fi

      - name: Run Prisma migrations (backend only)
        if: matrix.project.name == 'backend'
        working-directory: ${{ matrix.project.path }}
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Generate Prisma client (backend only)
        if: matrix.project.name == 'backend'
        working-directory: ${{ matrix.project.path }}
        run: npx prisma generate

      - name: Lint
        working-directory: ${{ matrix.project.path }}
        run: |
          if npm run lint --silent >/dev/null 2>&1; then
            npm run lint
          else
            echo "No lint script available for ${{ matrix.project.name }}"
          fi
        continue-on-error: true

      - name: Build
        working-directory: ${{ matrix.project.path }}
        run: |
          if npm run build --silent >/dev/null 2>&1; then
            npm run build
          else
            echo "No build script available for ${{ matrix.project.name }}"
          fi
        continue-on-error: true

      - name: Run tests with coverage
        working-directory: ${{ matrix.project.path }}
        run: npm run ${{ matrix.project.test-script }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.project.name }}
          path: ${{ matrix.project.path }}/coverage/

  sonar_scan:
    name: SonarQube Analysis
    runs-on: ubuntu-22.04
    needs: [ci_test_scan]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && rm -rf node_modules package-lock.json && npm install --legacy-peer-deps

      - name: SonarQube Scan
        id: sqscan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.javascript.lcov.reportPaths=coverage-reports/backend/coverage/lcov.info,coverage-reports/frontend/coverage/lcov.info

      - name: SonarQube Quality Gate
        id: qg
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    outputs:
      quality_gate: ${{ steps.qg.outputs.quality-gate-status }}

  