name: CI & CD

on:
  pull_request:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

permissions:
  contents: read
  pull-requests: write
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ci_test_scan:
    name: Lint, Test, Coverage & Sonar
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        project:
          - name: backend
            path: ./backend
            test-script: test:coverage
          - name: frontend
            path: ./frontend
            test-script: test:coverage
      fail-fast: false

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.project.path }}
        run: |
          if [ "${{ matrix.project.name }}" = "frontend" ]; then
            # Fix for Rollup optional dependencies issue
            rm -rf node_modules package-lock.json
            npm install --legacy-peer-deps
          else
            npm ci
          fi

      - name: Run Prisma migrations (backend only)
        if: matrix.project.name == 'backend'
        working-directory: ${{ matrix.project.path }}
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Generate Prisma client (backend only)
        if: matrix.project.name == 'backend'
        working-directory: ${{ matrix.project.path }}
        run: npx prisma generate

      - name: Lint
        working-directory: ${{ matrix.project.path }}
        run: |
          if npm run lint --silent >/dev/null 2>&1; then
            npm run lint
          else
            echo "No lint script available for ${{ matrix.project.name }}"
          fi
        continue-on-error: true

      - name: Run Tests with Coverage
        working-directory: ${{ matrix.project.path }}
        run: |
          echo "Running tests with coverage for ${{ matrix.project.name }}"
          npm run ${{ matrix.project.test-script }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Build
        working-directory: ${{ matrix.project.path }}
        run: |
          if npm run build --silent >/dev/null 2>&1; then
            npm run build
          else
            echo "No build script available for ${{ matrix.project.name }}"
          fi
        continue-on-error: true
        
      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.project.name }}
          path: ${{ matrix.project.path }}/coverage/
          retention-days: 1

  sonar_scan:
    name: SonarQube Analysis
    runs-on: ubuntu-22.04
    needs: [ci_test_scan]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports/
          pattern: coverage-*

      - name: Verify coverage files
        run: |
          echo "Checking downloaded artifacts..."
          ls -la coverage-reports/ || echo "No coverage-reports directory"
          echo "Looking for lcov.info files..."
          find coverage-reports/ -name "lcov.info" -type f || echo "No lcov.info files found"
          echo "Directory structure:"
          find coverage-reports/ -type d || echo "No directories found"
          echo "Checking specific paths:"
          ls -la coverage-reports/coverage-backend/coverage/ || echo "Backend coverage directory not found"
          ls -la coverage-reports/coverage-frontend/coverage/ || echo "Frontend coverage directory not found"
          echo "All files in coverage-reports:"
          find coverage-reports/ -type f || echo "No files found"

      - name: Restructure coverage files for SonarQube
        run: |
          # Create the expected directory structure
          mkdir -p coverage-reports/coverage-backend/coverage
          mkdir -p coverage-reports/coverage-frontend/coverage
          
          # Move backend coverage files
          if [ -d "coverage-reports/coverage-backend" ]; then
            if [ -f "coverage-reports/coverage-backend/lcov.info" ]; then
              cp coverage-reports/coverage-backend/lcov.info coverage-reports/coverage-backend/coverage/
              echo "Backend lcov.info copied to expected location"
            fi
          fi
          
          # Move frontend coverage files
          if [ -d "coverage-reports/coverage-frontend" ]; then
            if [ -f "coverage-reports/coverage-frontend/lcov.info" ]; then
              cp coverage-reports/coverage-frontend/lcov.info coverage-reports/coverage-frontend/coverage/
              echo "Frontend lcov.info copied to expected location"
            fi
          fi
          
          # Verify final structure
          echo "Final coverage structure:"
          find coverage-reports/ -name "lcov.info" -type f || echo "No lcov.info files found"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && rm -rf node_modules package-lock.json && npm install --legacy-peer-deps

      - name: Prepare SonarQube arguments
        id: sonar-args
        run: |
          # Check if coverage files exist and build arguments accordingly
          COVERAGE_ARGS=""
          
          if [ -f "coverage-reports/coverage-backend/coverage/lcov.info" ] && [ -f "coverage-reports/coverage-frontend/coverage/lcov.info" ]; then
            COVERAGE_ARGS="-Dsonar.javascript.lcov.reportPaths=coverage-reports/coverage-backend/coverage/lcov.info,coverage-reports/coverage-frontend/coverage/lcov.info -Dsonar.typescript.lcov.reportPaths=coverage-reports/coverage-backend/coverage/lcov.info,coverage-reports/coverage-frontend/coverage/lcov.info"
            echo "Coverage files found, including in analysis"
          elif [ -f "coverage-reports/coverage-backend/coverage/lcov.info" ]; then
            COVERAGE_ARGS="-Dsonar.javascript.lcov.reportPaths=coverage-reports/coverage-backend/coverage/lcov.info -Dsonar.typescript.lcov.reportPaths=coverage-reports/coverage-backend/coverage/lcov.info"
            echo "Backend coverage file found, including in analysis"
          elif [ -f "coverage-reports/coverage-frontend/coverage/lcov.info" ]; then
            COVERAGE_ARGS="-Dsonar.javascript.lcov.reportPaths=coverage-reports/coverage-frontend/coverage/lcov.info -Dsonar.typescript.lcov.reportPaths=coverage-reports/coverage-frontend/coverage/lcov.info"
            echo "Frontend coverage file found, including in analysis"
          else
            echo "No coverage files found, running analysis without coverage"
          fi
          
          echo "sonar-args=$COVERAGE_ARGS" >> $GITHUB_OUTPUT

      - name: SonarQube Scan
        id: sqscan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            ${{ steps.sonar-args.outputs.sonar-args }}
            -Dsonar.qualitygate.wait=true

      - name: SonarQube Quality Gate
        id: qg
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    outputs:
      quality_gate: ${{ steps.qg.outputs.quality-gate-status }}

  