name: CI & CD

on:
  pull_request:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

permissions:
  contents: read
  pull-requests: write
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        project:
          - name: backend
            path: ./backend
          - name: frontend
            path: ./frontend
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.project.path }}
        run: |
          if [ "${{ matrix.project.name }}" = "frontend" ]; then
            # Fix for Rollup optional dependencies issue
            rm -rf node_modules package-lock.json
            npm install --legacy-peer-deps
          else
            npm ci
          fi

      - name: Run Prisma migrations (backend only)
        if: matrix.project.name == 'backend'
        working-directory: ${{ matrix.project.path }}
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Generate Prisma client (backend only)
        if: matrix.project.name == 'backend'
        working-directory: ${{ matrix.project.path }}
        run: npx prisma generate

      - name: Run Unit Tests
        working-directory: ${{ matrix.project.path }}
        run: |
          if [ "${{ matrix.project.name }}" = "backend" ]; then
            npm run test -- --testPathPattern="unit" --coverage
          else
            npm run test:coverage
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          TEST_BYPASS_AUTH: 'true'

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project.name }}-coverage
          path: ${{ matrix.project.path }}/coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-22.04
    needs: [unit-tests]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        project:
          - name: backend
            path: ./backend
      fail-fast: false

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.project.path }}
        run: npm ci

      - name: Run Prisma migrations
        working-directory: ${{ matrix.project.path }}
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Generate Prisma client
        working-directory: ${{ matrix.project.path }}
        run: npx prisma generate

      - name: Run E2E Tests
        working-directory: ${{ matrix.project.path }}
        run: npm run test -- --testPathPattern="e2e" --coverage
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          TEST_BYPASS_AUTH: 'true'

      - name: Upload E2E coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project.name }}-e2e-coverage
          path: ${{ matrix.project.path }}/coverage

  sonar_scan:
    name: SonarQube Analysis
    runs-on: ubuntu-22.04
    needs: [unit-tests]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts

      - name: SonarQube Scan
        id: sqscan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.skip=false
            -Dsonar.coverageReportPaths=coverage-artifacts/backend-coverage/lcov.info
            -Dsonar.javascript.lcov.reportPaths=coverage-artifacts/frontend-coverage/lcov.info

      - name: SonarQube Quality Gate
        id: qg
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    outputs:
      quality_gate: ${{ steps.qg.outputs.quality-gate-status }}

  