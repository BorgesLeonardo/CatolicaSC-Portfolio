name: CI/CD Development

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  BACKEND_DIR: './backend'
  FRONTEND_DIR: './frontend'

jobs:
  # Job para análise de código e testes do Backend
  backend-test:
    name: Backend Tests & Analysis
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

    - name: Install Backend Dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm ci

    - name: Generate Prisma Client
      working-directory: ${{ env.BACKEND_DIR }}
      run: npx prisma generate

    - name: Run Database Migrations
      working-directory: ${{ env.BACKEND_DIR }}
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run Backend Type Check
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run typecheck

    - name: Run Backend Tests
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Upload Backend Coverage
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: ${{ env.BACKEND_DIR }}/coverage/

  # Job para análise de código e testes do Frontend
  frontend-test:
    name: Frontend Tests & Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm ci

    - name: Run Frontend Lint
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run lint

    - name: Run Frontend Type Check
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run typecheck

    - name: Run Frontend Tests
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run test:coverage

    - name: Upload Frontend Coverage
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: ${{ env.FRONTEND_DIR }}/coverage/

  # Job para build das aplicações
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Backend Dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm ci

    - name: Build Backend
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run build

    - name: Install Frontend Dependencies
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm ci

    - name: Build Frontend
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run build

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          ${{ env.BACKEND_DIR }}/dist/
          ${{ env.FRONTEND_DIR }}/dist/

  # Job para análise de qualidade de código com SonarCloud
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: |
        cd ${{ env.BACKEND_DIR }} && npm ci
        cd ${{ env.FRONTEND_DIR }} && npm ci

    - name: Download Backend Coverage
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage
        path: coverage-reports/backend/

    - name: Download Frontend Coverage
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: coverage-reports/frontend/

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job para deploy em ambiente de desenvolvimento
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, sonarcloud-analysis]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./artifacts/

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.BACKEND_DIR }}
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/backend:develop
          ghcr.io/${{ github.repository }}/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.FRONTEND_DIR }}
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/frontend:develop
          ghcr.io/${{ github.repository }}/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Development Environment
      run: |
        echo "Deploying to development environment..."
        echo "Backend image: ghcr.io/${{ github.repository }}/backend:develop"
        echo "Frontend image: ghcr.io/${{ github.repository }}/frontend:develop"
        # Aqui você pode adicionar comandos específicos para deploy
        # como kubectl, docker-compose, ou scripts de deploy personalizados

  # Job para notificações
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, build, sonarcloud-analysis]
    if: always()

    steps:
    - name: Notify Success
      if: ${{ needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        echo "Backend tests: ${{ needs.backend-test.result }}"
        echo "Frontend tests: ${{ needs.frontend-test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "SonarCloud: ${{ needs.sonarcloud-analysis.result }}"

    - name: Notify Failure
      if: ${{ needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Some checks failed!"
        echo "Backend tests: ${{ needs.backend-test.result }}"
        echo "Frontend tests: ${{ needs.frontend-test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "SonarCloud: ${{ needs.sonarcloud-analysis.result }}"
        exit 1
