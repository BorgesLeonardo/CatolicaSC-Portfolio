name: CI/CD Pipeline with SonarQube

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  BACKEND_DIR: './backend'
  FRONTEND_DIR: './frontend'

jobs:
  # Job para anÃ¡lise de qualidade de cÃ³digo com SonarQube
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Run backend tests with coverage
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run test:ci
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Run frontend linting
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run lint

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Job para testes do backend
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      - name: Generate Prisma client
        working-directory: ${{ env.BACKEND_DIR }}
        run: npx prisma generate

      - name: Run type checking
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run typecheck

      - name: Run tests
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run test:ci
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

  # Job para build e testes do frontend
  frontend-build:
    name: Frontend Build & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Run linting
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run lint

      - name: Build application
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

  # Job para build do backend
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      - name: Generate Prisma client
        working-directory: ${{ env.BACKEND_DIR }}
        run: npx prisma generate

      - name: Build backend
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run build

  # Job para deploy (apenas na branch main)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [sonarqube, backend-tests, frontend-build, backend-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "ðŸš€ Deploy job would run here"
          echo "All quality checks passed successfully!"
          echo "Backend and Frontend builds completed"
          echo "SonarQube analysis completed"
