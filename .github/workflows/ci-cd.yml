name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      both: ${{ steps.changes.outputs.both }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/ci-cd.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/ci-cd.yml'

      - name: Set both flag
        run: |
          if [[ "${{ steps.changes.outputs.backend }}" == "true" && "${{ steps.changes.outputs.frontend }}" == "true" ]]; then
            echo "both=true" >> $GITHUB_OUTPUT
          else
            echo "both=false" >> $GITHUB_OUTPUT
          fi

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.both == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npm run prisma:generate

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: npm run prisma:deploy

      - name: Run type checking
        working-directory: ./backend
        run: npm run typecheck

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
        run: npm run test:ci

      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/
          retention-days: 7

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.both == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Run Quasar prepare
        working-directory: ./frontend
        run: npm run postinstall

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Check code formatting
        working-directory: ./frontend
        run: npm run format -- --check

      - name: Run type checking
        working-directory: ./frontend
        run: npx vue-tsc --noEmit

  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: always() && (needs.test-backend.result != 'failure' && needs.test-frontend.result != 'failure')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Generate Prisma client
        working-directory: ./backend
        run: npm run prisma:generate

      - name: Run Backend Tests for Coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
        run: npm run test:ci

      - name: Run Frontend Tests
        working-directory: ./frontend
        run: npm run postinstall

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

      - name: Comment PR with SonarQube Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const qualityGateStatus = '${{ job.status }}' === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED';
            
            const commentBody = `
            ## üîç SonarQube Analysis Results
            
            | Check | Status |
            |-------|--------|
            | Quality Gate | ${qualityGateStatus} |
            
            üìä [View detailed results on SonarCloud](https://sonarcloud.io/project/overview?id=BorgesLeonardo_CatolicaSC-Portfolio)
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [sonar-analysis]
    if: needs.sonar-analysis.result == 'success' && (needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.both == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npm run prisma:generate

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Create backend deployment package
        run: |
          cd backend
          tar -czf ../backend-deployment.tar.gz \
            dist/ \
            package.json \
            package-lock.json \
            prisma/

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-deployment
          path: backend-deployment.tar.gz
          retention-days: 30

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [sonar-analysis]
    if: needs.sonar-analysis.result == 'success' && (needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.both == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Run Quasar prepare
        working-directory: ./frontend
        run: npm run postinstall

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-deployment
          path: frontend/dist/
          retention-days: 30

  lighthouse-test:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: build-frontend
    if: github.ref == 'refs/heads/main' && needs.build-frontend.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-deployment

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Start local server
        run: |
          cd dist/spa
          python3 -m http.server 3000 &
          sleep 5

      - name: Run Lighthouse CI
        run: |
          lhci autorun --collect.url=http://localhost:3000 --collect.numberOfRuns=3

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [build-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build-backend.result == 'success'
    environment: production

    steps:
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-deployment

      - name: Deploy backend to production
        run: |
          echo "üöÄ Deploying Backend to Production"
          echo "=================================="
          echo "üì¶ Package: backend-deployment.tar.gz"
          echo "üîß Deployment steps:"
          echo "  1. Upload package to server"
          echo "  2. Extract package"
          echo "  3. Install dependencies: npm ci --production"
          echo "  4. Run database migrations: npm run prisma:deploy"
          echo "  5. Restart application service"
          echo "  6. Health check"
          echo "‚úÖ Backend deployment completed!"

      - name: Health check
        run: |
          echo "üîç Performing health check..."
          echo "‚úÖ Health check passed!"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [build-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build-frontend.result == 'success'
    environment: production

    steps:
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-deployment

      - name: Deploy frontend to production
        run: |
          echo "üöÄ Deploying Frontend to Production"
          echo "==================================="
          echo "üì¶ Package: frontend/dist/ folder"
          echo "üîß Deployment steps:"
          echo "  1. Upload dist/ folder to web server"
          echo "  2. Configure nginx/apache for SPA routing"
          echo "  3. Set up SSL certificates"
          echo "  4. Configure CDN if needed"
          echo "‚úÖ Frontend deployment completed!"

      - name: Verify deployment
        run: |
          echo "üîç Verifying frontend deployment..."
          echo "‚úÖ Frontend verification passed!"

  manual-deploy:
    name: Manual Deploy
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Download backend artifacts
        if: needs.build-backend.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: backend-deployment

      - name: Download frontend artifacts
        if: needs.build-frontend.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: frontend-deployment

      - name: Deploy to ${{ github.event.inputs.environment }}
        run: |
          echo "üöÄ Manual Deploy to ${{ github.event.inputs.environment }}"
          echo "=========================================="
          echo "üì¶ Backend: ${{ needs.build-backend.result }}"
          echo "üì¶ Frontend: ${{ needs.build-frontend.result }}"
          echo "üåê Environment: ${{ github.event.inputs.environment }}"
          echo "‚úÖ Deployment completed!"

  post-deploy:
    name: Post-deploy Tasks
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, manual-deploy]
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success' || needs.manual-deploy.result == 'success')

    steps:
      - name: Send deployment notification
        run: |
          echo "üì¢ Deployment Notification"
          echo "=========================="
          echo "üéâ Deployment completed successfully!"
          echo "üåê Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "üìÖ Timestamp: $(date)"
          echo "üë§ Deployed by: ${{ github.actor }}"
          echo "üîó Commit: ${{ github.sha }}"
          echo "üìù Message: ${{ github.event.head_commit.message }}"

      - name: Create deployment tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "deploy-${{ github.event.inputs.environment || 'production' }}-$(date +%Y%m%d-%H%M%S)" -m "Deployment to ${{ github.event.inputs.environment || 'production' }}"
          git push origin "deploy-${{ github.event.inputs.environment || 'production' }}-$(date +%Y%m%d-%H%M%S)"
