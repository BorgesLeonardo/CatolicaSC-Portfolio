import dotenv from 'dotenv';
import { verifyToken } from '@clerk/backend';
import Database from '../config/database';

// Load environment variables
dotenv.config();

async function testClerkIntegration() {
  console.log('üîç Testando integra√ß√£o com Clerk...\n');
  
  try {
    await Database.connect();
    
    // 1. Verificar configura√ß√µes
    console.log('1Ô∏è‚É£ Verificando configura√ß√µes...');
    const clerkSecretKey = process.env.CLERK_SECRET_KEY;
    const clerkPublishableKey = process.env.CLERK_PUBLISHABLE_KEY;
    const clerkWebhookSecret = process.env.CLERK_WEBHOOK_SECRET;
    
    console.log(`üîë CLERK_SECRET_KEY: ${clerkSecretKey ? 'Configurado' : '‚ùå N√£o configurado'}`);
    console.log(`üîë CLERK_PUBLISHABLE_KEY: ${clerkPublishableKey ? 'Configurado' : '‚ùå N√£o configurado'}`);
    console.log(`üîë CLERK_WEBHOOK_SECRET: ${clerkWebhookSecret ? 'Configurado' : '‚ùå N√£o configurado'}`);
    
    if (!clerkSecretKey) {
      console.log('‚ùå CLERK_SECRET_KEY n√£o configurado. Configure no arquivo .env');
      return;
    }
    
    // 2. Testar conex√£o com Clerk
    console.log('\n2Ô∏è‚É£ Testando conex√£o com Clerk...');
    try {
      // Criar um token de teste (isso falhar√°, mas testa a configura√ß√£o)
      const testToken = 'test_token';
      await verifyToken(testToken, {
        secretKey: clerkSecretKey
      });
    } catch (error: any) {
      if (error.message.includes('Invalid token')) {
        console.log('‚úÖ Configura√ß√£o do Clerk OK (token inv√°lido esperado)');
      } else {
        console.log('‚ùå Erro na configura√ß√£o do Clerk:', error.message);
      }
    }
    
    // 3. Verificar estrutura do banco
    console.log('\n3Ô∏è‚É£ Verificando estrutura do banco...');
    const prisma = Database.getInstance();
    
    const userCount = await prisma.user.count();
    console.log(`üë• Total de usu√°rios: ${userCount}`);
    
    const webhookEventsCount = await prisma.webhookEvent.count();
    console.log(`üì® Total de eventos de webhook: ${webhookEventsCount}`);
    
    // 4. Testar cria√ß√£o de usu√°rio manual
    console.log('\n4Ô∏è‚É£ Testando cria√ß√£o de usu√°rio...');
    const testUserId = 'test_clerk_user_' + Date.now();
    const testEmail = 'test@example.com';
    
    try {
      const existingUser = await prisma.user.findUnique({
        where: { clerkUserId: testUserId }
      });
      
      if (existingUser) {
        await prisma.user.delete({
          where: { id: existingUser.id }
        });
        console.log('üóëÔ∏è  Usu√°rio de teste anterior removido');
      }
      
      const newUser = await prisma.user.create({
        data: {
          clerkUserId: testUserId,
          email: testEmail,
          name: 'Usu√°rio de Teste',
          role: 'user'
        }
      });
      
      console.log(`‚úÖ Usu√°rio de teste criado: ${newUser.email} (${newUser.id})`);
      
      // Limpar usu√°rio de teste
      await prisma.user.delete({
        where: { id: newUser.id }
      });
      console.log('üóëÔ∏è  Usu√°rio de teste removido');
      
    } catch (error) {
      console.log('‚ùå Erro ao criar usu√°rio de teste:', error);
    }
    
    // 5. Verificar endpoints da API
    console.log('\n5Ô∏è‚É£ Verificando endpoints da API...');
    console.log('üìã Endpoints dispon√≠veis:');
    console.log('  - GET  /api/auth/me - Informa√ß√µes do usu√°rio autenticado');
    console.log('  - GET  /api/auth/profile - Perfil completo do usu√°rio');
    console.log('  - PUT  /api/auth/profile - Atualizar perfil');
    console.log('  - GET  /api/auth/users - Listar usu√°rios (admin)');
    console.log('  - GET  /api/auth/check - Verificar autentica√ß√£o');
    console.log('  - POST /api/webhooks/clerk - Webhook do Clerk');
    console.log('  - POST /api/webhooks/test - Teste de webhook (dev)');
    
    console.log('\n' + '='.repeat(50));
    console.log('üéâ INTEGRA√á√ÉO CLERK CONFIGURADA COM SUCESSO!');
    console.log('‚úÖ Backend pronto para autentica√ß√£o');
    console.log('‚úÖ Sincroniza√ß√£o de usu√°rios configurada');
    console.log('‚úÖ Webhooks configurados');
    console.log('='.repeat(50));
    
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Configure o webhook no Clerk Dashboard:');
    console.log('   - URL: https://seu-dominio.com/api/webhooks/clerk');
    console.log('   - Eventos: user.created, user.updated, user.deleted');
    console.log('2. Teste a autentica√ß√£o no frontend');
    console.log('3. Implemente as rotas de campanhas');
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  } finally {
    await Database.disconnect();
  }
}

// Run the test
testClerkIntegration();

