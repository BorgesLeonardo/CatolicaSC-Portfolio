// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserRole {
  user
  admin
}

enum CampaignStatus {
  draft
  active
  paused
  completed
  canceled
}

enum ContributionStatus {
  pending
  paid
  failed
  refunded
  canceled
}

// Models
model User {
  id           String   @id @default(uuid())
  clerkUserId  String   @unique @map("clerk_user_id")
  email        String   @unique
  name         String?
  imageUrl     String?  @map("image_url")
  role         UserRole @default(user)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  campaigns    Campaign[]
  contributions Contribution[]
  comments     Comment[]

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  campaigns   Campaign[]

  @@map("categories")
}

model Campaign {
  id                    String         @id @default(uuid())
  creatorId             String         @map("creator_id")
  categoryId            String         @map("category_id")
  slug                  String         @unique
  title                 String
  description           String
  goal                  Decimal        @db.Decimal(12, 2)
  status                CampaignStatus @default(draft)
  startDate             DateTime       @map("start_date")
  endDate               DateTime       @map("end_date")
  imageUrl              String?        @map("image_url")
  
  // Stripe integration
  stripeProductId       String?        @map("stripe_product_id")
  stripePriceId         String?        @map("stripe_price_id")
  stripePaymentLinkUrl  String?        @map("stripe_payment_link_url")
  
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")

  // Relations
  creator               User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  category              Category       @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  contributions         Contribution[]
  comments              Comment[]

  @@index([creatorId])
  @@index([categoryId])
  @@index([slug])
  @@index([status])
  @@map("campaigns")
}

model Contribution {
  id                    String             @id @default(uuid())
  userId                String             @map("user_id")
  campaignId            String             @map("campaign_id")
  amount                Decimal            @db.Decimal(12, 2)
  currency              String             @default("BRL") @db.Char(3)
  
  // Stripe integration
  stripeCheckoutSessionId String?          @map("stripe_checkout_session_id")
  stripePaymentIntentId   String?          @map("stripe_payment_intent_id")
  
  status                ContributionStatus @default(pending)
  isAnonymous           Boolean            @default(false) @map("is_anonymous")
  createdAt             DateTime           @default(now()) @map("created_at")

  // Relations
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign              Campaign           @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  webhookEvents         WebhookEvent[]

  @@index([userId])
  @@index([campaignId])
  @@index([campaignId, status])
  @@index([campaignId, createdAt])
  @@index([stripePaymentIntentId])
  @@index([stripeCheckoutSessionId])
  @@map("contributions")
}

model Comment {
  id           String    @id @default(uuid())
  campaignId   String    @map("campaign_id")
  authorUserId String    @map("author_user_id")
  content      String
  createdAt    DateTime  @default(now()) @map("created_at")
  deletedAt    DateTime? @map("deleted_at")

  // Relations
  campaign     Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  author       User      @relation(fields: [authorUserId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([authorUserId])
  @@index([createdAt])
  @@map("comments")
}

model WebhookEvent {
  id              String    @id @default(uuid())
  provider        String    @default("stripe")
  eventId         String    @unique @map("event_id")
  type            String
  payload         Json
  contributionId  String?   @map("contribution_id")
  receivedAt      DateTime  @default(now()) @map("received_at")
  processedAt     DateTime? @map("processed_at")
  signatureVerified Boolean @default(true) @map("signature_verified")

  // Relations
  contribution    Contribution? @relation(fields: [contributionId], references: [id], onDelete: SetNull)

  @@index([provider])
  @@index([type])
  @@index([processedAt])
  @@map("webhook_events")
}

