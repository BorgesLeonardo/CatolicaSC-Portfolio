// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  campaigns     Campaign[]
  contributions Contribution[]
  comments      Comment[]

  @@map("users")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relacionamentos
  campaigns Campaign[]

  @@map("categories")
}

model Campaign {
  id          String   @id @default(cuid())
  title       String
  description String
  goal        Decimal  @db.Decimal(10, 2)
  current     Decimal  @default(0) @db.Decimal(10, 2)
  image       String?
  status      CampaignStatus @default(ACTIVE)
  startDate   DateTime @default(now())
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id])
  contributions Contribution[]
  comments     Comment[]

  @@map("campaigns")
}

model Contribution {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  message     String?
  anonymous   Boolean  @default(false)
  status      ContributionStatus @default(PENDING)
  paymentId   String?  @unique
  qrCode      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("contributions")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("comments")
}

enum CampaignStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum ContributionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
