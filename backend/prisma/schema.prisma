generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

/// Usuário: chave primária é o ID do Clerk (string)
model User {
  id            String         @id
  email         String?        @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projects      Project[]
  contributions Contribution[]
  comments      Comment[]
}

/// Categoria de Campanha
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  color       String?   // Para UI: cor do badge/tag
  icon        String?   // Para UI: ícone da categoria
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
}

/// Campanha/Projeto
model Project {
  id              String         @id @default(cuid())
  ownerId         String
  categoryId      String?
  title           String
  description     String?
  goalCents       Int
  deadline        DateTime
  imageUrl        String?        // Mantido para compatibilidade, será removido futuramente
  raisedCents     Int            @default(0)
  supportersCount Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  owner           User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category        Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  contributions   Contribution[]
  comments        Comment[]
  images          ProjectImage[] // Nova relação com imagens

  @@index([ownerId])
  @@index([categoryId])
}

/// Imagens de Projeto
model ProjectImage {
  id        String   @id @default(cuid())
  projectId String
  filename  String   // Nome do arquivo salvo no servidor
  originalName String // Nome original do arquivo
  url       String   // URL pública da imagem
  size      Int      // Tamanho do arquivo em bytes
  mimeType  String   // Tipo MIME (image/jpeg, image/png, etc.)
  order     Int      @default(0) // Ordem de exibição (0 = primeira)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@unique([projectId, order]) // Garante ordem única por projeto
}

/// Contribuição/Doação
model Contribution {
  id                      String    @id @default(cuid())
  projectId               String
  contributorId           String?
  amountCents             Int
  currency                String    @default("brl")
  status                  String    @default("PENDING") // PENDING, SUCCEEDED, FAILED, REFUNDED
  stripePaymentIntentId   String?   @unique
  stripeCheckoutSessionId String?   @unique
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  project                 Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contributor             User?     @relation(fields: [contributorId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@index([contributorId])
}

/// Comentário em projeto
model Comment {
  id        String   @id @default(cuid())
  projectId String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([authorId])
}
