// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

enum ContributionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Models
model User {
  id            String    @id @default(uuid()) @db.Uuid
  clerkUserId   String    @unique @map("clerk_user_id") @db.Text
  email         String    @unique @db.Text
  name          String?   @db.Text
  imageUrl      String?   @map("image_url") @db.Text
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relacionamentos
  campaigns     Campaign[]
  contributions Contribution[]
  comments      Comment[]

  @@map("users")
}

model Category {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.Text
  description String? @db.Text

  // Relacionamentos
  campaigns   Campaign[]

  @@map("categories")
}

model Campaign {
  id                    String          @id @default(uuid()) @db.Uuid
  creatorId             String          @map("creator_id") @db.Uuid
  categoryId            String          @map("category_id") @db.Uuid
  slug                  String          @unique @db.Text
  title                 String          @db.Text
  description           String          @db.Text
  goal                  Decimal         @db.Decimal(12, 2)
  status                CampaignStatus  @default(DRAFT)
  startDate             DateTime?       @map("start_date") @db.Date
  endDate               DateTime?       @map("end_date") @db.Date
  imageUrl              String?         @map("image_url") @db.Text
  stripeProductId       String?         @map("stripe_product_id") @db.Text
  stripePriceId         String?         @map("stripe_price_id") @db.Text
  stripePaymentLinkUrl  String?         @map("stripe_payment_link_url") @db.Text
  createdAt             DateTime        @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime        @updatedAt @map("updated_at") @db.Timestamptz

  // Relacionamentos
  creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  contributions Contribution[]
  comments      Comment[]

  @@map("campaigns")
}

model Contribution {
  id                      String            @id @default(uuid()) @db.Uuid
  userId                  String            @map("user_id") @db.Uuid
  campaignId              String            @map("campaign_id") @db.Uuid
  amount                  Decimal           @db.Decimal(12, 2)
  currency                String            @db.Char(3)
  stripeCheckoutSessionId String?           @map("stripe_checkout_session_id") @db.Text
  stripePaymentIntentId   String?           @map("stripe_payment_intent_id") @db.Text
  status                  ContributionStatus @default(PENDING)
  isAnonymous             Boolean           @default(false) @map("is_anonymous")
  createdAt               DateTime          @default(now()) @map("created_at") @db.Timestamptz

  // Relacionamentos
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign       Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  webhookEvents  WebhookEvent[]

  @@map("contributions")
}

model Comment {
  id            String    @id @default(uuid()) @db.Uuid
  campaignId    String    @map("campaign_id") @db.Uuid
  authorUserId  String    @map("author_user_id") @db.Uuid
  content       String    @db.Text
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz

  // Relacionamentos
  campaign  Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorUserId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model WebhookEvent {
  id              String    @id @default(uuid()) @db.Uuid
  provider        String    @db.Text
  eventId         String    @unique @map("event_id") @db.Text
  type            String    @db.Text
  payload         Json      @db.JsonB
  contributionId  String?   @map("contribution_id") @db.Uuid
  receivedAt      DateTime  @default(now()) @map("received_at") @db.Timestamptz
  processedAt     DateTime? @map("processed_at") @db.Timestamptz
  signatureVerified Boolean @default(false) @map("signature_verified")

  // Relacionamentos
  contribution Contribution? @relation(fields: [contributionId], references: [id], onDelete: SetNull)

  @@map("webhook_events")
}
