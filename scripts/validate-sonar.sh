#!/bin/bash

# Script para validar configura√ß√£o do SonarQube localmente
# Uso: ./scripts/validate-sonar.sh

set -e

echo "üîç Validando configura√ß√£o do SonarQube..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "sonar-project.properties" ]; then
    log_error "Arquivo sonar-project.properties n√£o encontrado!"
    log_error "Execute este script a partir do diret√≥rio raiz do projeto."
    exit 1
fi

log_info "Verificando arquivos de configura√ß√£o..."

# Verificar arquivos necess√°rios
REQUIRED_FILES=(
    "sonar-project.properties"
    ".sonarcloud.properties"
    ".github/workflows/backend.yml"
    "backend/package.json"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        log_success "Arquivo $file encontrado"
    else
        log_error "Arquivo $file n√£o encontrado!"
        exit 1
    fi
done

# Verificar se o backend existe e tem as depend√™ncias necess√°rias
log_info "Verificando estrutura do backend..."

if [ ! -d "backend/src" ]; then
    log_error "Diret√≥rio backend/src n√£o encontrado!"
    exit 1
fi

if [ ! -d "backend/src/__tests__" ]; then
    log_warning "Diret√≥rio backend/src/__tests__ n√£o encontrado!"
    log_warning "Certifique-se de que os testes est√£o no local correto."
fi

# Verificar scripts no package.json
log_info "Verificando scripts do package.json..."

REQUIRED_SCRIPTS=(
    "test:ci"
    "test:coverage"
    "build"
    "lint"
)

cd backend

for script in "${REQUIRED_SCRIPTS[@]}"; do
    if npm run-script --silent "$script" --dry-run > /dev/null 2>&1; then
        log_success "Script '$script' encontrado"
    else
        log_error "Script '$script' n√£o encontrado no package.json!"
        exit 1
    fi
done

# Verificar se as depend√™ncias est√£o instaladas
log_info "Verificando depend√™ncias..."

if [ ! -d "node_modules" ]; then
    log_warning "node_modules n√£o encontrado. Executando npm install..."
    npm install
fi

# Testar build
log_info "Testando build do projeto..."
if npm run build; then
    log_success "Build executado com sucesso"
else
    log_error "Falha no build do projeto!"
    exit 1
fi

# Testar linting
log_info "Testando linting..."
if npm run lint; then
    log_success "Linting passou sem erros"
else
    log_error "Falha no linting!"
    exit 1
fi

# Testar testes unit√°rios
log_info "Executando testes unit√°rios..."
if npm run test:ci; then
    log_success "Testes unit√°rios passaram"
else
    log_error "Falha nos testes unit√°rios!"
    exit 1
fi

# Verificar se o coverage foi gerado
if [ -f "coverage/lcov.info" ]; then
    log_success "Arquivo de coverage gerado com sucesso"
else
    log_warning "Arquivo de coverage n√£o encontrado. Isso pode afetar a an√°lise do SonarQube."
fi

cd ..

# Verificar vari√°veis de ambiente necess√°rias (se estiverem definidas)
log_info "Verificando vari√°veis de ambiente..."

if [ -n "$SONAR_TOKEN" ]; then
    log_success "SONAR_TOKEN est√° definido"
else
    log_warning "SONAR_TOKEN n√£o est√° definido. Necess√°rio para execu√ß√£o no CI/CD."
fi

if [ -n "$GITHUB_TOKEN" ]; then
    log_success "GITHUB_TOKEN est√° definido"
else
    log_warning "GITHUB_TOKEN n√£o est√° definido. Necess√°rio para execu√ß√£o no CI/CD."
fi

# Verificar configura√ß√£o do sonar-project.properties
log_info "Validando sonar-project.properties..."

if grep -q "sonar.projectKey=BorgesLeonardo_CatolicaSC-Portfolio" sonar-project.properties; then
    log_success "Project Key configurado corretamente"
else
    log_error "Project Key n√£o configurado corretamente!"
    exit 1
fi

if grep -q "sonar.organization=catolicasc-portfolio" sonar-project.properties; then
    log_success "Organization configurada corretamente"
else
    log_error "Organization n√£o configurada corretamente!"
    exit 1
fi

if grep -q "sonar.sources=backend/src" sonar-project.properties; then
    log_success "Sources configuradas corretamente"
else
    log_error "Sources n√£o configuradas corretamente!"
    exit 1
fi

log_success "üéâ Todas as valida√ß√µes passaram!"
log_info "Configura√ß√£o do SonarQube est√° pronta para uso no CI/CD."

echo ""
log_info "üìã Pr√≥ximos passos:"
echo "1. Certifique-se de que os secrets SONAR_TOKEN e GITHUB_TOKEN est√£o configurados no GitHub"
echo "2. Fa√ßa um push para main ou develop para testar o pipeline"
echo "3. Verifique os resultados no SonarCloud: https://sonarcloud.io/dashboard?id=BorgesLeonardo_CatolicaSC-Portfolio"
echo ""
